using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using Mono.Data.Sqlite;

namespace Application.Logic
{
    public partial class ConfigManager : Singleton<ConfigManager>
    {
        #ITERATOR_BEGIN#
        #SELECT_DICT_ONE_KEY_BEGIN#
        private Dictionary<#KEY1_VALUETYPE#, #TABLENAME#> m_#TABLENAME#Dict = new Dictionary<#KEY1_VALUETYPE#, #TABLENAME#>();
        #SELECT_DICT_ONE_KEY_END#
        #SELECT_DICT_TWO_KEY_BEGIN#
        private Dictionary<#KEY1_VALUETYPE#, Dictionary<#KEY2_VALUETYPE#, #TABLENAME#>> m_#TABLENAME#Dict = new Dictionary<#KEY1_VALUETYPE#, Dictionary<#KEY2_VALUETYPE#, #TABLENAME#>>();
        #SELECT_DICT_TWO_KEY_END#
        #SELECT_DICT_THREE_KEY_BEGIN#
        private Dictionary<#KEY1_VALUETYPE#, Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, #TABLENAME#>>> m_#TABLENAME#Dict = new Dictionary<#KEY1_VALUETYPE#, Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, #TABLENAME#>>>();
        #SELECT_DICT_THREE_KEY_END#
        #SELECT_DICT_FOUR_KEY_BEGIN#
        private Dictionary<#KEY1_VALUETYPE#, Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>>>> m_#TABLENAME#Dict = new Dictionary<#KEY1_VALUETYPE#, Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>>>>();
        #SELECT_DICT_FOUR_KEY_END#
        #SELECT_ONE_KEY_BEGIN#
        public #TABLENAME# Get#TABLENAME#ByID(#KEY1_VALUETYPE# key1)
        #SELECT_ONE_KEY_END#
        #SELECT_TWO_KEY_BEGIN#
        public #TABLENAME# Get#TABLENAME#ByID(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2)
        #SELECT_TWO_KEY_END#
        #SELECT_THREE_KEY_BEGIN#
        public #TABLENAME# Get#TABLENAME#ByID(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, #KEY3_VALUETYPE# key3)
        #SELECT_THREE_KEY_END#
        #SELECT_FOUR_KEY_BEGIN#
        public #TABLENAME# Get#TABLENAME#ByID(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, #KEY3_VALUETYPE# key3, #KEY4_VALUETYPE# key4)
        #SELECT_FOUR_KEY_END#
        {
            const string tableName = "#TABLENAME#";
  
            #TABLENAME# desc = null;
            #SELECT_FIND_1KEY_BEGIN#
            if(Find#TABLENAME#Data(key1, ref desc))
            #SELECT_FIND_1KEY_END#
            #SELECT_FIND_2KEY_BEGIN#
            if(Find#TABLENAME#Data(key1, key2, ref desc))
            #SELECT_FIND_2KEY_END#
            #SELECT_FIND_3KEY_BEGIN#
            if(Find#TABLENAME#Data(key1, key2, key3, ref desc))
            #SELECT_FIND_3KEY_END#
            #SELECT_FIND_4KEY_BEGIN#
            if(Find#TABLENAME#Data(key1, key2, key3, key4, ref desc))
            #SELECT_FIND_4KEY_END#
                return desc;

            #SELECT_READER_ONE_KEY_BEGIN#
            SqliteDataReader reader = m_Sql.ReadTable(tableName, "#KEY1_NAME#", "=", key1.ToString());
            #SELECT_READER_ONE_KEY_END#
            #SELECT_READER_TWO_KEY_BEGIN#
            SqliteDataReader reader = m_Sql.ReadTable(tableName, new string[] {"#KEY1_NAME#", "#KEY2_NAME#"}, "=", new string[] {key1.ToString(), key2.ToString()});
            #SELECT_READER_TWO_KEY_END#
            #SELECT_READER_THREE_KEY_BEGIN#
            SqliteDataReader reader = m_Sql.ReadTable(tableName, new string[] {"#KEY1_NAME#", "#KEY2_NAME#", "#KEY3_NAME#"}, "=", new string[] {key1.ToString(), key2.ToString(), key3.ToString()});
            #SELECT_READER_THREE_KEY_END#
            #SELECT_READER_FOUR_KEY_BEGIN#
            SqliteDataReader reader = m_Sql.ReadTable(tableName, new string[] {"#KEY1_NAME#", "#KEY2_NAME#", "#KEY3_NAME#", "#KEY4_NAME#"}, "=", new string[] {key1.ToString(), key2.ToString(), key3.ToString(), key4.ToString()});
            #SELECT_READER_FOUR_KEY_END#
            bool bFind = reader.HasRows;
            while(reader.Read())
            {                
                #READER_VARIANT_BEGIN#
                desc.#VARIANT# = reader.#READER_FUNCTION#(reader.GetOrdinal("#VARIANT#"));
                #READER_VARIANT_END#
                #READER_REFERENCE_BEGIN#
                desc.#VARIANT# = Get#TABLENAME#ByID(reader.GetInt32(reader.GetOrdinal("#VARIANT#")));
                #READER_REFERENCE_END#
                #READER_LIST_BEGIN#
                Parse(ref desc.#VARIANT#, reader.GetString(reader.GetOrdinal("#VARIANT#")));
                #READER_LIST_END#
            }
            if(!bFind)
            {
                #REMOVE_ONE_KEY_BEGIN#
                Remove#TABLENAME#Data(key1);
                #REMOVE_ONE_KEY_END#
                #REMOVE_TWO_KEY_BEGIN#
                Remove#TABLENAME#Data(key1, key2);
                #REMOVE_TWO_KEY_END#
                #REMOVE_THREE_KEY_BEGIN#
                Remove#TABLENAME#Data(key1, key2, key3);
                #REMOVE_THREE_KEY_END#
                #REMOVE_FOUR_KEY_BEGIN#
                Remove#TABLENAME#Data(key1, key2, key3, key4);
                #REMOVE_FOUR_KEY_END#
            }

            return bFind ? desc : null;
        }
        #FINDER_1KEY_BEGIN#
        private bool Find#TABLENAME#Data(#KEY1_VALUETYPE# key1, ref #TABLENAME# desc)
        {
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out desc))
            {
                desc = new #TABLENAME#();
                m_#TABLENAME#Dict.Add(key1, desc);
                return false;
            }
            return true;
        }
        #FINDER_1KEY_END#  
        #FINDER_2KEY_BEGIN#
        private bool Find#TABLENAME#Data(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, ref #TABLENAME# desc)
        {
            Dictionary<#KEY2_VALUETYPE#, #TABLENAME#> dict;
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out dict))
            {
                dict = new Dictionary<#KEY2_VALUETYPE#, #TABLENAME#>();
                m_#TABLENAME#Dict.Add(key1, dict);
            }

            if(!dict.TryGetValue(key2, out desc))
            {
                desc = new #TABLENAME#();
                dict.Add(key2, desc);
                return false;
            }
            return true;
        }      
        #FINDER_2KEY_END#
        #FINDER_3KEY_BEGIN#
        private bool Find#TABLENAME#Data(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, #KEY3_VALUETYPE# key3, ref #TABLENAME# desc)
        {
            Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, #TABLENAME#>> dict;
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out dict))
            {
                dict = new Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, #TABLENAME#>>();
                m_#TABLENAME#Dict.Add(key1, dict);
            }

            Dictionary<#KEY3_VALUETYPE#, #TABLENAME#> dict2;
            if(!dict.TryGetValue(key2, out dict2))
            {
                dict2 = new Dictionary<#KEY3_VALUETYPE#, #TABLENAME#>();
                dict.Add(key2, dict2);
            }

            if(!dict2.TryGetValue(key3, out desc))
            {
                desc = new #TABLENAME#();
                dict2.Add(key3, desc);
                return false;
            }
            return true;
        }
        #FINDER_3KEY_END#
        #FINDER_4KEY_BEGIN#
        private bool Find#TABLENAME#Data(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, #KEY3_VALUETYPE# key3, #KEY4_VALUETYPE# key4, ref #TABLENAME# desc)
        {
            Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>>> dict;
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out dict))
            {
                dict = new Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>>>();
                m_#TABLENAME#Dict.Add(key1, dict);
            }

            Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>> dict2;
            if(!dict.TryGetValue(key2, out dict2))
            {
                dict2 = new Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>>();
                dict.Add(key2, dict2);
            }

            Dictionary<#KEY4_VALUETYPE#, #TABLENAME#> dict3;
            if(!dict2.TryGetValue(key3, out dict3))
            {
                dict3 = new Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>();
                dict2.Add(key3, dict3);
            }

            if(!dict3.TryGetValue(key4, out desc))
            {
                desc = new #TABLENAME#();
                dict3.Add(key4, desc);
                return false;
            }
            return true;
        }
        #FINDER_4KEY_END#
        #REMOVE_ONE_KEY_IMPLEMENTION_BEGIN#
        private void Remove#TABLENAME#Data(#KEY1_VALUETYPE# key1)
        {
            m_#TABLENAME#Dict.Remove(key1);
        }
        #REMOVE_ONE_KEY_IMPLEMENTION_END#
        #REMOVE_TWO_KEY_IMPLEMENTION_BEGIN#
        private void Remove#TABLENAME#Data(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2)
        {
            Dictionary<#KEY2_VALUETYPE#, #TABLENAME#> dict;
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out dict))
            {
                return;
            }

            #TABLENAME# desc;
            if(!dict.TryGetValue(key2, out desc))
            {
                return;
            }
            dict.Remove(key2);
        }
        #REMOVE_TWO_KEY_IMPLEMENTION_END#
        #REMOVE_THREE_KEY_IMPLEMENTION_BEGIN#
        private void Remove#TABLENAME#Data(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, #KEY3_VALUETYPE# key3)
        {
            Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, #TABLENAME#>> dict;
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out dict))
            {
                return;
            }

            Dictionary<#KEY3_VALUETYPE#, #TABLENAME#> dict2;
            if(!dict.TryGetValue(key2, out dict2))
            {
                return;
            }

            #TABLENAME# desc;
            if(!dict2.TryGetValue(key3, out desc))
            {
                return;
            }
            dict2.Remove(key3);
        }
        #REMOVE_THREE_KEY_IMPLEMENTION_END#
        #REMOVE_FOUR_KEY_IMPLEMENTION_BEGIN#
        private void Remove#TABLENAME#Data(#KEY1_VALUETYPE# key1, #KEY2_VALUETYPE# key2, #KEY3_VALUETYPE# key3, #KEY4_VALUETYPE# key4)
        {
            Dictionary<#KEY2_VALUETYPE#, Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>>> dict;
            if(!m_#TABLENAME#Dict.TryGetValue(key1, out dict))
            {
                return;
            }

            Dictionary<#KEY3_VALUETYPE#, Dictionary<#KEY4_VALUETYPE#, #TABLENAME#>> dict2;
            if(!dict.TryGetValue(key2, out dict2))
            {
                return;
            }

            Dictionary<#KEY4_VALUETYPE#, #TABLENAME#> dict3;
            if(!dict2.TryGetValue(key3, out dict3))
            {
                return;
            }

            #TABLENAME# desc;
            if(!dict3.TryGetValue(key4, out desc))
            {
                return;
            }
            dict3.Remove(key4);
        }
        #REMOVE_FOUR_KEY_IMPLEMENTION_END#
        #ITERATOR_END#
    }
}