// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
buildscript {
	repositories {
		maven {
			url 'http://arti.lilithgame.com:8881/artifactory/remote-repos'
			credentials {
				username 'common_reader'
				password 'common_reader'
			}
		}
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:2.1.0'
	}
}

allprojects {
	repositories {
		maven {
			url 'http://arti.lilithgame.com:8881/artifactory/remote-repos'
			credentials {
				username 'common_reader'
				password 'common_reader'
			}
		}
		flatDir {
			dirs 'libs'
		}
	}
}

apply plugin: 'com.android.application'

android {
	compileSdkVersion 26
	buildToolsVersion '26.0.3'

	defaultConfig {
		targetSdkVersion **TARGETSDKVERSION**
		applicationId '**APPLICATIONID**'
	}

	lintOptions {
		abortOnError false
	}

**SIGN**
	buildTypes {
  		debug {
 			minifyEnabled **MINIFY_DEBUG**
 			useProguard **PROGUARD_DEBUG**
 			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'**USER_PROGUARD**
  			jniDebuggable true
  		}
  		release {
 			minifyEnabled **MINIFY_RELEASE**
 			useProguard **PROGUARD_RELEASE**
  			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'**USER_PROGUARD**
  			**SIGNCONFIG**
  		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile 'com.lilith.sdk:lilith_sdk_sp_uiless_daike:1.2.8'
	compile 'sh.lilith.lilithchat:chatsdk-roc:4.6.8'
**DEPS**}

def abiFliterList = [${excludeAbis}]

def removeInvalidAbis = { abiList ->
	if (abiList == null || abiList.isEmpty()) {
		return
	}
	abiList.each { abi ->
		def tree = fileTree(dir: "${buildDir}/intermediates/exploded-aar", include: "*/*/*/jni/${abi}/*")
		delete tree
	}
}

tasks.whenTaskAdded { task ->
    android.applicationVariants.all { variant ->
        if ("prepare${variant.name.capitalize()}Dependencies".toString().equals(task.name.toString())) {
            task.doLast {
                removeInvalidAbis abiFliterList
            }
        } 
    }
}
