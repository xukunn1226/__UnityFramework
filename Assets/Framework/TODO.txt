* GPU Skinning: 
	https://zhuanlan.zhihu.com/p/87583171  [Unity3d杂记]骨骼蒙皮动画
	https://github.com/chengkehan/GPUSkinning   
	https://github.com/Unity-Technologies/Animation-Instancing
	https://blogs.unity3d.com/2018/04/16/animation-instancing-instancing-for-skinnedmeshrenderer/
	https://www.cnblogs.com/smallrainf/p/11746909.html  GPU Skinning 结合 Instanced 高效实现大量单位动画
	http://www.xuanyusong.com/archives/4488  Unity3D研究院GPU Instancing测试
	https://zhuanlan.zhihu.com/p/26200956  GPU Skinning 加速骨骼动画
	https://zhuanlan.zhihu.com/p/268891238  Unity 使用 ECS With Burst 来再次加速你的GPUSkinning
	https://zhuanlan.zhihu.com/p/108367119  Unity大规模角色的GPU顶点动画表达方式
	https://zhuanlan.zhihu.com/p/108725072  Unity大规模角色的GPU蒙皮动画表达方式
	https://blog.csdn.net/yxriyin/article/details/83018985  gpu instancing animation代替骨骼动画的做法
	https://www.cnblogs.com/murongxiaopifu/p/7250772.html  利用GPU实现大规模动画角色的渲染
* 也许用的到的工具
	asset-bundle-analyzer   https://github.com/faelenor/asset-bundle-analyzer   通过py脚本分析Bundles信息，并存储至SQLite
	DB Browser for SQLite 	https://sqlitebrowser.org/  SQLite查看工具
* Inspector Field for Scene Asset  https://answers.unity.com/questions/242794/inspector-field-for-scene-asset.html?_ga=2.221217361.81844548.1594053424-350901822.1561524296

* sleep, pause（减少空转）, spin, 各种锁，map reduce
	线程的几种状态：new, runnable, running, not runnable, dead
	非可运行状态引申出三个状态：阻塞（blocked）、同步锁（locked）、等待（waiting）
* 互斥锁、自旋锁
	互斥锁：获取锁失败后线程进入睡眠或阻塞状态，这个过程会涉及到用户态到内核态的调度，上下文切换开销比较大
	自旋锁：用自旋来代替阻塞操作。获取某个锁失败，则此线程将不断循环检查该锁是否被释放，而不是让此线程挂起或睡眠，一种忙等待状态，过程中会一直消耗时间片
			需要保证各个本地缓存数据的一致性，在多处理器上，每个线程对应的处理器都对同一个变量进行读写。每次写操作都需要同步每个处理器缓存，这可能会影响性能。
	总结：互斥锁更适合持有锁时间长的情况，而自旋锁更适合持有锁时间短的情况
* 对象池重构：参照线程池7大核心参数
	corePoolSize（核心线程数）
	maximumPoolSize（最大线程数）：当项目比较多的时候，施工队就需要增加工人，但是也不能无限制地加。最多就加到 maximumPoolSize 个人，当闲下来的时候，施工队就要遣散工人，但是至少保留corePoolSize 个人。
	keepAliveTime&unit（存活时间&单位）：很简单，当线程池内部的线程数已经大于 corePoolSize 的时候，一个线程如果在一段时间内，都没有执行任务，说明很闲。keepAliveTime 和 unit 就是用来定义这个“一段时间”的参数。也就是说，如果一个线程空闲了keepAliveTime & unit 这么久，那么这个空闲的线程就要被回收了。
	handler（拒绝策略）：如果线程池中所有的线程都在忙碌，并且工作队列也满了（前提是工作队列是有界队列），那么此时提交任务，线程池就会拒绝接收。
	至于拒绝的策略，可以通过 handler 这个参数来指定：
		CallerRunsPolicy：提交任务的线程自己去执行该任务。
		AbortPolicy：默认的拒绝策略，直接丢弃任务，抛出RejectedExecutionException。
		DiscardPolicy：直接丢弃任务，没有任何异常抛出。
		DiscardOldestPolicy：丢弃最老的任务，其实就是把最早进入工作队列的任务丢弃，然后把新任务加入到工作队列。
* Optimization
	https://secretlab.institute/2019/06/14/power-saving-in-unity-for-non-game-apps/  Power-Saving in Unity
	https://gamedevelopertips.com/increase-performance-in-unity-games/  How To Optimise And Increase Performance In Unity Games
	https://blogs.unity3d.com/2019/04/01/higher-fidelity-and-smoother-frame-rates-with-adaptive-performance/  Higher fidelity and smoother frame rates with Adaptive Performance
	https://www.youtube.com/watch?v=KK2hWczq8ZY  Power Efficient Programing - Unite Europe 2015
	https://www.youtube.com/watch?v=j4YAY36xjwE  Unite Europe 2016 - Optimizing Mobile Applications
	https://www.youtube.com/watch?v=_wxitgdx-UI  Unite Europe 2017 - Squeezing Unity: Tips for raising performance
	https://mp.weixin.qq.com/s/2VufiCiU7TT8rM9BK-CTZA
	https://mp.weixin.qq.com/s/LWTDjqEY2YbZHZeksrtBvA
	https://mp.weixin.qq.com/s/an36v8erNS7HKrh9HRylcQ
	https://mp.weixin.qq.com/s/CMNMRXJCuYIfolvI9zLB7w  知乎大V「放牛的星星」，是这么做性能优化的
	https://mp.weixin.qq.com/s/XNxa0oeW25R_mwCgKWp11w  优化移动游戏性能 | 来自Unity顶级工程师的性能分析、内存与代码架构小贴士
	https://mp.weixin.qq.com/s/OUdDJRA9YAcQ6CuTyDcahw  从搭建到优化，《永劫无间》如何做游戏动作与运动系统
	https://mp.weixin.qq.com/s/ISwHGpzEyLL4IOLXrHPt6A  《黑暗之潮》中次时代技术的应用经验及技术
	https://mp.weixin.qq.com/s/WkXT-umcp57XpjFymSWoTA  着色器运行效率和图形质量兼得！技术大佬的 Shader Graph 功能试验
* RTS中的避障算法
	VO:
		https://blog.csdn.net/zhiai315/article/details/113931422  VO避障
		https://blog.csdn.net/natsu1211/article/details/37774547?spm=1001.2014.3001.5501  碰撞回避算法(一) Velocity Obstacle
	RVO:
		http://www.meltycriss.com/2017/01/13/paper-rvo/ 论文笔记《Reciprocal Velocity Obstacles for Real-Time Multi-Agent Navigation》
		https://zsummer.github.io/2019/06/08/2019-06-08-rvo/  RVO源码阅读笔记
		http://blog.sina.com.cn/s/blog_6ad33d350102xqal.html  RVO算法
		https://www.jianshu.com/p/8fc4e90e3850  RVO（Reciprocal Velocity Obstacles）障碍物规避算法
		https://github.com/anders007/RVO/blob/master/%E7%A2%B0%E6%92%9E%E8%A7%84%E9%81%BF%E7%AE%97%E6%B3%95RVO(Reciprocal%20Velocity%20Obstacles)%E7%AE%80%E4%BB%8B.pdf
	RVO2(ORCA):
		https://zhuanlan.zhihu.com/p/74888471  ORCA-有关机器人群碰撞避免算法解读
		https://blog.csdn.net/liuerin/article/details/103610440?spm=1001.2014.3001.5501  ORCA(Optimal Reciprocal Collision Avoidance)笔记
		https://blog.csdn.net/u012740992/article/details/89397714  导航动态避让算法RVO的优化ORCA
	Paper:
		https://gamma.cs.unc.edu/RVO/
 		https://gamma.cs.unc.edu/RVO2/
 		https://gamma.cs.unc.edu/ORCA/ 	
		http://www.red3d.com/cwr/boids
	Github:
		https://github.com/snape

* 寻路 	
	https://blog.csdn.net/needmorecode  NavMesh生成研究 && Recast源码解析	
 	https://cloud.tencent.com/developer/article/1502519  A*寻路初探
 	https://www.cnblogs.com/technology/archive/2011/05/26/2058842.html  理解A*寻路算法具体过程 	
	http://aigamedev.com/open/review/total-war-ai/		
	https://www.cnblogs.com/flyinggod/p/8671053.html  D*是动态A*，适合动态网格，环境如权重不断变化情况下
	https://blog.csdn.net/lqzdreamer/article/details/85055569  D*路径搜索算法原理解析及Python实现
	https://blog.csdn.net/banzhuan133/article/details/100532206  D*(Dynamic A*) 算法详细解析	
	路径平滑算法：佛洛依德路径平滑算法（FLOYD）、漏斗算法
	https://www.geeksforgeeks.org/a-search-algorithm/
	https://www.redblobgames.com/pathfinding/a-star/implementation.html
	https://en.wikipedia.org/wiki/A*_search_algorithm
	http://theory.stanford.edu/~amitp/GameProgramming/
	https://www.redblobgames.com/pathfinding/grids/algorithms.html
	https://paul.pub/a-star-algorithm/  路径规划之 A* 算法
	https://scm_mos.gitlab.io/motion-planner/a-star/    A Star Algorithm 总结与实现

	[已读]
	https://zhuanlan.zhihu.com/p/109108400  RTS游戏中的寻路
	https://zhuanlan.zhihu.com/p/109556568 	
	https://blog.csdn.net/KubilityDef/article/details/79483414 
	https://www.gameres.com/340777.html  即时战略游戏中实用的寻路算法分享 
	https://www.zhihu.com/question/20298134  即时战略游戏中实用的寻路算法都有哪些，比较如何？
	https://blog.csdn.net/liweizhao/article/details/82106886  集群算法介绍
	https://blog.csdn.net/a1047120490/article/details/105108701  集群寻路问题的一些思考和提炼
	https://blog.csdn.net/needmorecode/article/details/82050409  寻路建模的三种方式比较
	https://www.shangmayuan.com/a/2cb9439dd987480b86c171d8.html  多边形寻路算法简单介绍
	https://www.cnblogs.com/neoragex2002/archive/2007/09/09/887556.html  Navigation Mesh与Line-of-Sight Test
	http://www.luzexi.com/2013/10/06/Unity3D%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1NavMesh%E5%AF%BB%E8%B7%AF  Unity3D架构设计NavMesh寻路  有代码
	https://zhuanlan.zhihu.com/p/40177186 NavMesh生成原理
	https://zhuanlan.zhihu.com/p/38053482 NavMesh导航寻路使用
	https://zhuanlan.zhihu.com/p/270363845  A星寻路和navmesh寻路的技巧和优化
	https://my.oschina.net/u/1859679/blog/1486636  深入理解游戏中寻路算法
	https://blog.csdn.net/qq_32270109/article/details/90673151?spm=1001.2014.3001.5501  RVO算法探究. 和AStarPathFinding插件研究
	https://zhuanlan.zhihu.com/p/355887068  Unity 实现各种寻路算法
	https://blog.csdn.net/q764424567/article/details/80528457?spm=1001.2014.3001.5501  Unity3d 寻路插件A*Pathfinding学习与研究
	https://zhuanlan.zhihu.com/p/108361733  寻路算法之A*算法 Unity项目实战 优化
	http://frankorz.com/2017/12/16/greedy-best-find-search/  寻路算法 - 贪婪最佳优先算法
	Flocking Behaviour
	Steering Behaviour
	https://blog.csdn.net/XieNaoban/article/details/53524165?spm=1001.2014.3001.5501  [笔记]A*寻路算法初探
* Unity CommandBuffer或是Camera重定向RenderTarget的ColorBuffer & DepthBuffer
	https://blog.csdn.net/linjf520/article/details/104964803
* XLua开发环境的整合
	pbc
	luac
	lua profiler
	lua break ponit
	与C#共享内存 https://github.com/Tencent/xLua/issues/764			
	常用库的集成 https://github.com/chexiongsheng/build_xlua_with_libs
* AOI
	https://mp.weixin.qq.com/s/3srAV6SOW4CCIN57mYDYng
	https://www.zhihu.com/question/43625409
	https://zhuanlan.zhihu.com/p/56114206
	https://blog.csdn.net/a374826954/article/details/17642587
	https://gameinstitute.qq.com/community/detail/108545
	https://blog.codingnow.com/2012/03/dev_note_13.html
	https://blog.codingnow.com/2008/07/aoi.html
	https://blog.codingnow.com/2008/11/aoi_server.html
	https://www.cnblogs.com/persistentsnail/p/3294842.html
	https://www.bookstack.cn/read/zinx/dadf967af9c153a4.md
	http://www.cppblog.com/jaxe/archive/2014/10/17/148998.html

* 特效相关：
    https://forum.unity.com/threads/released-off-screen-particles-render-particles-at-1-2-1-4-or-1-8-screen-resolution.358506/
    https://github.com/slipster216/OffScreenParticleRendering
    https://blogs.unity3d.com/2016/12/20/unitytips-particlesystem-performance-culling/
    https://blogs.unity3d.com/2016/04/20/particle-system-modules-faq/
	监控所有的特效播放，统一特效加载接口
	FX_Root支持特效进入对象池时控制细节更精细，不是deactive GameObject，而是disable animation
	搭建特效制作环境（InGame、UI）
	去除所有FX_Component组件上的duration，统一使用FX_Root duration
	对象池管理特效：当特效数量达到一定值，使用LOD机制弱化效果(FX AUTOLOD)	
	https://github.com/mob-sakai/ParticleEffectForUGUI
	https://github.com/mob-sakai/UIEffect

* optimization tips:
    culling仅在系统可预测时生效
    打开单个模块不仅会增加开销，更可能因为从过程模式（可预测）切换到非过程模式（不可预测）增加了整个系统的开销
    通过脚本改变数值将不再culling
    哪些是可预测模式？
        Local space
    show bound：持续改变说明是不可预测模式
    减少脚本控制，尽量使用系统内置功能
* AI插件推荐：https://answer.uwa4d.com/question/60cafcefe58b4719dd3e25ac
* 基于Unity的帧同步方案：http://clintonbrennan.com/2013/12/lockstep-implementation-in-unity3d
* 项目管理
	https://mp.weixin.qq.com/s/sTi5Nh5m6A_53QYI-7mRkw
* Misc
	设置抓帧调试环境
		1、Root设备
		2、安装magisk（再装一个propshide模块）
		3、改系统调试标记，如图
	Pool的初始大小可配置化
	Protobuf3优化
	LUA配表优化  https://blog.uwa4d.com/archives/1490.html
	高效场景管理工作流：https://mp.weixin.qq.com/s/U7T_3qTzFzrvOgPTNUIMFw
	提高打包加速问题：https://mp.weixin.qq.com/s/sCgrrRXlYzXOPC1fKCX7UA
	Unity内置资源如何打包避免冗余	https://mp.weixin.qq.com/s/thEI6NoyCrWnkrqF9Y346g
	扩展Gesture——双击功能，贴边移动
	Package目录下shader如何打包？https://answer.uwa4d.com/question/5f3d10b19424416784ef1c82
	ACT技能编辑器的制作经验分享 https://blog.uwa4d.com/archives/USparkle_ACT.html
	利用IJob优化DynamicBones https://mp.weixin.qq.com/s/WPURBQ8lyg9eCx2bITtKiw
	网络库在android&ios上网络切换时的响应：4G & WIFI互相切换、网络彻底断开等
	OBB管理  https://stackoverflow.com/questions/25832334/i-have-mounted-my-obb-file-but-how-to-get-the-final-path-to-my-assets
		   https://answers.unity.com/questions/1228809/where-to-put-my-obb-file.html
	对象池管理：常驻内存机制与预加载机制
	OBB管理：判断是分包方式还是整包方式，分包方式才需要下载obb
	bundle加密   https://www.xuanyusong.com/archives/4607
	一种Shader变体收集打包以及编译优化的思路	https://answer.uwa4d.com/question/5da86670e84db43d6efbda72	https://mp.weixin.qq.com/s/9_Wl-cm-4ZF2lAl4FLnYxg	
	扩展FPS组件，捕获帧率突变
	https://mp.weixin.qq.com/s/sOeYNbYfn-iX7w2CT0E28g  谈谈游戏中常见的后处理技术

*************************************** UI框架设计 ***************************************
	* 界面的制作、业务开发模式
	* 隐藏所有业务逻辑不需要关心的加载、卸载，界面流转等逻辑
    * 界面调度逻辑
    * 框架支持界面的FadeIn，FadeOut
	* 完整的业务流程
	* 提供界面扩展接口
	* Sprite Atlas流程：SpriteAtlasManager
	* MVVM，单向、双向数据绑定
	* 断线重连事件处理
	* Event是否发生在UI
	* 支持横竖屏
	* 支持自定义UI控件位置
	* 各种UI效果支持（羽化，描边等）
	* 特效挂载UI流程，资源分离，方便美术预览效果
	* 多种字体的支持，WGame只支持一种字体大小，且添加其他语种不友好，字体静态生成容易产生冗余，限制策划的使用
	* ResourceManager添加SpriteAtlas的管理
	* 如何卸载Atlas？https://github.com/jconstable/SpriteSleeper
		** 思考：prefab静态使用的散图可以预存为依赖图集，程序动态使用的图集需要用接口来约束
		** 只要Atlas被注册过，再次被引用到时不会调用RequestAtlas
		1、彻底卸载atlas ab：AssetBundle.unload（true）
		2、使用此atlas的gameobject被删除
	* 搭建美术UI制作环境(特效预览、分辨率适配等)
	* UIView跳转流程，参照新闻app的用户习惯设计
	* 特效、模型与UI混排的解决方案   https://zhuanlan.zhihu.com/p/33579005
	* 特效、动画、safeArea、图文混排，TextMeshPro、DrawCall可视化显示、图集打包规则
	* UI框架功能划分	
		图集
		DC可视化组件
		修改基础控件的默认参数
		HUD
		红点系统
		新手引导
	参考：
	M4u、uFrame Framework、Loxodon Framework、https://github.com/jbruening/ugui-mvvm、https://github.com/push-pop/Unity-MVVM、https://github.com/chexiongsheng/XUUI
	https://zhuanlan.zhihu.com/p/102278660   个人对于游戏UI架构的思考与总结
	https://blog.uwa4d.com/archives/UWA_UITree.html   UI开发与优化知识Tree
	https://github.com/NVentimiglia/Unity3d-Foundation

	* UI Opt
	https://learn.unity.com/tutorial/optimizing-unity-ui
    https://create.unity3d.com/Unity-UI-optimization-tips
	https://gameinstitute.qq.com/community/detail/114203  				重建 是UGUI优化的关键
	https://zhuanlan.zhihu.com/p/55566751  				  				Unity UGUI 点击性能优化
	https://blog.csdn.net/VR_iShow/article/details/92850381
	https://thegamedev.guru/unity-ui/optimization-strategies/
	https://forum.unity.com/threads/unity-ui-performance-tips-sharing-my-findings.524916/
	https://blog.uwa4d.com/archives/QA_UGUI-1.html  					关于Unity中的UGUI优化，你可能遇到这些问题
	https://blog.uwa4d.com/archives/Sparkle_Shader_UI.html  			Unity手游开发札记——使用Shader进行UGUI的优化
	https://blog.csdn.net/akak2010110/article/details/80953370  		UGUI drawcall合并原理，解释了什么是BottomUI
	https://www.jianshu.com/p/061e67308e5f  							Unity GUI(uGUI)使用心得与性能总结	
	https://gameinstitute.qq.com/community/detail/112235  				UGUI优化：批次合并源码分析及工具
	https://mp.weixin.qq.com/s/tYuEDNDYKlrUn933BWheHw                   Unity性能优化 — UI模块
	

	一切的优化围绕三个点进行：batch build、mesh build、raycast
	* batch build: 根据depth排序，检测overlap，material id，worker thread执行
	* rebuild process：Layout rebuilds & Graphics rebuilds

	* 没有勾选raycastTarget的Graphic从判定列表中移除：GraphicRegistry.UnregisterGraphicForCanvas。显示/隐藏时移除？见GraphicRaycaster.Raycast()
	* 优化GraphicRaycaster.eventCamera，没有缓存
	* 考虑当raycast时取消排序，始终返回最上层graphics，优化GraphicsRaycster::Raycast()
	* Graphics.canvasRenderer的判空操作过多，也有一定耗时，考虑组件各自在Awake中缓存
	* GraphicRaycaster减少depth获取次数，优化raycast函数
	* 减少点击事件响应的组件注册（原生Image即使不选择RaycastTarget也会出现在判定列表中），可以重写OnTransformParentChanged，OnCanvasHierarchyChanged
	* 不在屏幕内的UI不参与raycast，增加判定UI是否在屏幕内的接口，修改raycast函数
	* Mask2个DC，会打断上下合批，但Mask之间能合批	
	* 删除不必要的元素，减少层次结构，这样可以减少深度排序耗时
	* 动态UI元素（频繁改变例如顶点、alpha、position、size）与静态UI元素分离
	* 谨慎使用UI元素的enable/disable，会触发rebuild，替代方案是enable/disable UI元素的CanvasRender或Canvas
	* 谨慎使用Text的Best Fit
	* 谨慎使用Canvas的Pixel Perfect
	* 对于不需要接收touch事件的元素，禁用Raycast Target
	* 批处理需要符合以下条件：
		* 在同一个canvas下。
		* 使用同一个材质
		* 在同一时间渲染
		* RectTransform共面(深度相同),不重叠。
		* 在同一个父mask下(不同mask下会造成drawcall增加)
	* 使用Slice时，对于不需要渲染中心的可以uncheck Fill Center
	* 修改Image自带的Color属性实际上是修改顶点上的属性，会导致网格重建，可以自定义材质，去改变材质的Tint Color
	* 同一级Canvas之间的渲染顺序：ovreride sorting=false时，以hierarchy顺序渲染;override sorting=true时，以sort order顺序渲染
	* 隐藏界面的几种方式带来的影响对比
		1、SetActive				优势：NO CPU、no raycast；劣势：GC，rebuild mesh
		2、Out of Screen			优势：NO GC；劣势：CPU有开销，raycast有开销，rebuild mesh
		3、Set Layer（OutUI）		优势：切换无开销，no rebuild mesh；劣势：CPU有开销，raycast
		4、Disable canvas			据说是最优，不会rebuild mesh，不会rebatch，待验证
	* overridesorting属性会打断射线，可以降低层级遍历的成本?
	* 放入缓存池的最佳操作：disable the gameobject first，then reparent it into pool
	  取出缓存池的最佳操作：reparent it first, then update your data, then enable it
	* Animator会每帧dirty ui element，尽量减少使用（待验证）

* 动态打图集方案：
	https://github.com/DaVikingCode/UnityRuntimeSpriteSheetsGenerator

* 同屏大量HUD的优化方案
	消耗点：
		元素更新开销
		网格更新开销
		渲染开销

	目标：
	动态字体
	图文混排（参考Super Text Mesh），一个DC，且可以利用动态合批功能
	遮挡关系
	HUD使用UI制作的缺陷：摄像机位置发生变化需要实时修改UI位置，导致网格合并，UI系统本身效率没有3D高

UI的主要消耗点：
	降低渲染开销（DC）
	降低更新开销（网格合并）
		动静分离
		降低更新频率
		避免“敏感”操作：避免FillAllDrawCalls
			添加/删除元素时，穿插了其他UIDrawCall（尽量避免）
			添加/删除的元素自成一个UIDrawCall（通过scale=0，alpha接近0来隐藏，而不是真正的删除）
		优化选项

	https://www.xuanyusong.com/archives/4331  SuperTextMesh
	https://edu.uwa4d.com/lesson-detail/127/487/0?isPreview=false   绕过Unity打造自己的HUD
	https://edu.uwa4d.com/course-intro/1/109  Unity UI模块优化案例精讲
	https://blog.uwa4d.com/archives/video_UI.html  
	简化mesh
	降低更新频率
	拆分panel，尽可能将相同更新频率的UI放在一个UIPanel中
	尽量减少激活的HUD
	NGUI、UGUI的DC合并规则
	NGUI.Visible优化大量网格更新时
	分帧执行SetActive
	TroopHeadBarName、TroopHeadBarSelected结构复杂度、更新频率不一致，考虑分开处理

## UGUI读书笔记
RectTransform:
* anchorMax, anchorMin：组合成四个锚点
    1、（anchorMin.x，anchorMin.y)  ——左下角
    2、（anchorMin.x,  anchorMax.y）——左上角    
    3、（anchorMax.x, anchorMin.y） ——右下角
    4、（anchorMax.x, anchorMax.y） ——右上角
* anchoredPosition：pivot相对anchor的位置，（面板上的PosX，PosY）
* sizeDelta：当anchor非strech模式时，等同于size；当anchor为stretch模式时，为相比父节点的差异值（面板上Width，Height）
* pivot：（0,0）面板左下角，（1,1）面板右上角；以pivot点轴心旋转
* offsetMin:  The offset of the lower left corner of the rectangle relative to the lower left anchor
* offsetMax:  The offset of the upper right corner of the rectangle relative to the upper right anchor
*************************************** UI框架设计 End ***************************************

*************************************** 资源管理 ***************************************

* 资源检查工具
	** 统计Bundle（A）中有哪些资源依赖了其他Bundle（B）中的哪些资源，参考AssetBundle Browser
	** 显示AssetDatabase.GetDependices和AssetBundleManifest.GetAllDependices的统计数据
	** 一键清理mat，fbx冗余依赖
* 显示bundle的被引用情况
* 显示bundle中没有被引用的资源
* 即使Bundle内的资源没有变化，因为存在一些不稳定因素打包后的bundle的binary不是严格一致的，解决方案是
	“计算打包之前的文件本体以及文件对应的META，这些文件的HASH作为依据”，https://www.bilibili.com/video/BV1Wv41167i2?from=search&seid=1342351602314114440  70min
	https://91make.top/assetbundle-%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85%E4%B8%8E%E4%B8%8B%E8%BD%BD%E6%9B%B4%E6%96%B0/
	https://blog.csdn.net/LIQIANGEASTSUN/article/details/79130408
* Preload: 添加预加载机制

*************************************** 资源管理 End ***************************************

*************************************** 基于高度图的地形渲染 ***************************************
* https://blog.csdn.net/CSDN_ONION/article/details/104494976
* https://blog.csdn.net/soilwork/article/details/580017
* https://zhuanlan.zhihu.com/p/269855011
*************************************** 基于高度图的地形渲染 End ***************************************

* Animation Instancing
	重构CullingGroup，使之模块化，其他功能模块也能友好使用
	增强AnimationInstancingManager的DebugInfo
	Opt：Animation Texture占用两份内存，怎么优化？
	性能测试








































- dll热更方案
	https://www.jianshu.com/p/ebb7a6080540  Unity Android Dll热更新使用说明
	https://juejin.cn/post/6844903713635581965   Unity Android il2cpp的完美热更解决方案
	https://www.yangzhenlin.com/unity-android-dll-hotupdate-encrypt/   Unity Android DLL 热更新与加密
	http://blog.sina.cn/dpool/blog/s/blog_9e5d42ee0102vvtg.html   Unity Android动态更新Assembly-CSharp.dll
	https://blog.csdn.net/u011643833/article/details/47261015   【Unity】代码加密（一）编译libmono
	https://www.jianshu.com/p/7b205ebcb54a  通过IL2CPP热更代码
- 使用反射实现类UE的Config.ini全局数据配置机制
- 重构loaderType，启动方式移至Launcher
- 发布release时仅发布第一个场景
- FileList记录基于文件的MD5和基于content的MD5
- Deployment涉及的文件夹一律小写
- PlatformName/FileList
- 封装BuildNumer的修改
- 测试batchmode模式打包
  重构：output可以动态设置
  "Assets/Temp/"
- SkipList
	https://blog.csdn.net/ict2014/article/details/17394259
	https://blog.csdn.net/kisimple/article/details/38706729
	https://www.cnblogs.com/xuqiang/archive/2011/05/22/2053516.html
- 延迟队列
	https://mp.weixin.qq.com/s/A85ievNNzHDrQv67yBkbtA
- Heap && PriorityQueue
	https://www.toutiao.com/i6778731130720879118/?tt_from=weixin&utm_campaign=client_share&wxshare_count=1&timestamp=1602237827&app=news_article&utm_source=weixin&utm_medium=toutiao_android&use_new_style=1&req_id=20201009180346010012058046260C4B64&group_id=6778731130720879118
	https://stackoverflow.com/questions/102398/priority-queue-in-net
	https://www.dotnetlovers.com/article/231/priority-queue
	https://referencesource.microsoft.com/#PresentationCore/Shared/MS/Internal/PriorityQueue.cs,3779854732f36d06
- 排序算法： 
	https://mp.weixin.qq.com/s/DfrZHKh-QyKG_Af5H5LWGg  动画详解常用排序算法	
	https://www.toutiao.com/i6873663185333780999/?tt_from=weixin&utm_campaign=client_share&wxshare_count=1&timestamp=1602393817&app=news_article&utm_source=weixin&utm_medium=toutiao_android&use_new_style=1&req_id=2020101113233701001204321612436D8E&group_id=6873663185333780999	
	https://www.toutiao.com/i6879298784736576014/?tt_from=weixin&utm_campaign=client_share&wxshare_count=1&timestamp=1602237809&app=news_article&utm_source=weixin&utm_medium=toutiao_android&use_new_style=1&req_id=20201009180328010017087043020C3BC4&group_id=6879298784736576014	
	https://www.toutiao.com/i6829510116627186188/?tt_from=weixin&utm_campaign=client_share&wxshare_count=1&timestamp=1602237964&app=news_article&utm_source=weixin&utm_medium=toutiao_android&use_new_style=1&req_id=202010091806040100150441561E0C7FA4&group_id=6829510116627186188
- FPS组件   https://mp.weixin.qq.com/s/RtRxap4vnJIhY2SQ3KWHPQ
- Network
	https://codereview.stackexchange.com/questions/224185/asynchronous-circular-buffer-in-c
	C# + Socket断线重连 https://blog.csdn.net/Duke147/article/details/50833745?utm_medium=distribute.pc_relevant_bbs_down.none-task--2~all~first_rank_v2~rank_v25-4.nonecase&depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task--2~all~first_rank_v2~rank_v25-4.nonecase
	https://stackoverflow.com/questions/59381847/writting-a-efficient-circular-buffer-for-use-with-c-sharp-socket
	整合NetClient, NetManager
	切换至后台可以维持很长时间的连接，飞行模式则不能，但具体情况视平台而定。没有统一的处理断线方法
	OnApplicationFocus、OnApplicationPause
- unsafe和非托管内存优化（字符串）
- string intern优化  https://zhuanlan.zhihu.com/p/23877335?refer=gu-lu  https://www.cnblogs.com/liuqiyun/p/9446887.html
- ObjectPool整合进Framework
- 手势模块：
	* 悬停
	* MyStandalongInputModule添加自定义当前选中对象
	* 思考:如何在PC上实现Pinch，见ProcessUnusedMouseEventData
- SBP: IBuildParameters.UseCache = false;实现rebuild bundle功能
- SoftPath分别存储BundleName，AssetName，减少运行时字符串操作
- 完善日志系统
	https://www.jianshu.com/p/5163b0a0180e
- Gesture Extension
	https://stackoverflow.com/questions/40341191/pinch-and-other-multi-finger-gestures-in-modern-unity3d
	https://stackoverflow.com/questions/40576493/duplicating-unitys-mystic-interface-power/40576974#40576974
- 嵌套Prefab的使用规范总结
- 可视化图集引用关系
- 尝试其他图集管理方法
1、check ”include in build"
2、图集和散图打在相同AB包中
3、不需要监听spriteAtlasManager
4、替换散图AB能热更
- 提供子文件夹的bundle name与父文件夹保持一致的功能
- 整理命名空间，s_XXX
- 整理所有Clear接口，仅清空数据，仍可用
- 添加MonoLRU，可制作为prefab，可视化配置
- GetOrCreatePoolInst RemoveMonoPoolInst重构至PoolManager
- SoftObject增加对IPooledObject对象加载的支持
- 增强显示：SoftObjectAttribute
- 支持SceneAsset的redirector
- SoftObject添加延时加载功能
- build from script
- SpawnerRing使用AB，PoolManager方式重制
- 参考GameFramework设置目录结构
- 打包出现modified的问题
- 使用ResourceManager的标准用法重构SpawnRing
- 配置：所有缓存对象可配置化（初始化大小等）
  PrefabObjectPool支持可视化配置，非MonoPool暂不支持
- PoolManager可配置Pool   Pool = PoolManagerExtension.GetOrCreatePool<Decal, LivingPrefabObjectPool>(assetPath);
  不支持assetPath方式Pool静态配置，可以把PrefabObjectPool做成Prefab，然后动态加载
- 退出Play Mode时PoolManager数据清除干净
- LRU
- PrefabObjectPool.m_ActivedObjects无法优化，考虑加宏控制是否启用(还有一个思路：自定义BetterLinkedList)
-- PoolManager EditorWindow, stat memory info
- review ObjectPool inspector
- 隐藏IBetterLinkedListNode。Next的set接口
- LinkedObjectPool Testcase
- LinkedObjectPool
- BetterLinkedList
- PoolManager inspector
- review LivingPrefabObjectPool
- GetOrCreatePool(string assetPath)
- Pool支持可选是否DontDestroyOnLoad
- 工具监测特效制作是否规范
- 工具检测特效是否符合合批规范
https://github.com/gmhevinci/MotionFramework/blob/master/Docs/Editor.ParticleProfiler.md
https://github.com/sunbrando/ParticleEffectProfiler
- FX_Root配置回收类型（Destroy、IPool），可配置有哪些对象池可供选择
- 完善FX_Root，接入对象池* 去除所有FX_Component组件上的duration，统一使用FX_Root duration
- 消息系统：
	https://blog.csdn.net/qq_33413868/article/details/104725966  
	https://blog.csdn.net/qq_33413868/article/details/104725268  
	https://blog.csdn.net/qq_33413868/article/details/104721686
	https://blog.csdn.net/luoyikun/article/details/79442201  unity3d无需进行装箱/拆箱的【事件管理器
	https://www.jianshu.com/p/bf82beb41f7f  Unity 3D 教你打造自己的EventSystem(事件总线)
	https://blog.csdn.net/u013108312/article/details/52351826  Unity3D游戏开发框架-消息机制
	https://blog.csdn.net/lovethRain/article/details/52100067?spm=1001.2014.3001.5501  Unity 客户端框架（三）：消息机制
	http://www.manew.com/blog-52341-2366.html  Unity3D游戏框架设计3——事件机制、模块